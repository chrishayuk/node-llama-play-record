export declare function getPrebuildBinPath(): Promise<string | null>;
export declare function loadBin(): Promise<LlamaCppNodeModule>;
export type LlamaCppNodeModule = {
    LLAMAModel: LLAMAModel;
    LLAMAContext: LLAMAContext;
    LLAMAGrammar: LLAMAGrammar;
    LLAMAGrammarEvaluationState: LLAMAGrammarEvaluationState;
    systemInfo(): string;
};
export type LLAMAModel = {
    new (modelPath: string, params: {
        gpuLayers?: number;
        vocabOnly?: boolean;
        useMmap?: boolean;
        useMlock?: boolean;
    }): LLAMAModel;
};
export type LLAMAContext = {
    new (model: LLAMAModel, params: {
        seed?: number;
        contextSize?: number;
        batchSize?: number;
        f16Kv?: boolean;
        logitsAll?: boolean;
        embedding?: boolean;
        threads?: number;
    }): LLAMAContext;
    encode(text: string): Uint32Array;
    eval(tokens: Uint32Array, options?: {
        temperature?: number;
        topK?: number;
        topP?: number;
        repeatPenalty?: number;
        repeatPenaltyTokens?: Uint32Array;
        repeatPenaltyPresencePenalty?: number;
        repeatPenaltyFrequencyPenalty?: number;
        grammarEvaluationState?: LLAMAGrammarEvaluationState;
    }): Promise<number>;
    decode(tokens: Uint32Array): string;
    tokenBos(): number;
    tokenEos(): number;
    tokenNl(): number;
    getContextSize(): number;
    getTokenString(token: number): string;
};
export type LLAMAGrammar = {
    new (grammarPath: string, params?: {
        printGrammar?: boolean;
    }): LLAMAGrammar;
};
export type LLAMAGrammarEvaluationState = {
    new (grammar: LLAMAGrammar): LLAMAGrammarEvaluationState;
};
